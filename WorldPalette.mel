global proc reorderPriority()
{
    global string $scrollPriority;
    global int $priorityOrder[]; // this keeps track of the updates
    // Total number of items
    int $numItems = `textScrollList -q -ni $scrollPriority`;
    // Get selected item index
    int $clickedItem[] = `textScrollList -q -sii $scrollPriority`;
    // Get all items
    string $allItems[] = `textScrollList -q -ai $scrollPriority`;
    // If the first item is already the clicked item, do nothing
    if ($allItems[0] == $allItems[$clickedItem[0] - 1]) {
        return;
    } else {
        // Bring this item to the top
        textScrollList -e -ap 1 ($allItems[$clickedItem[0] - 1] + "") $scrollPriority;
        // Remove the item at the old position
        textScrollList -e -rii ($clickedItem[0] + 1) $scrollPriority;
        
        // Update the priority order array
        // Shift elements until you get to the moved item's index
        int $replaced = $priorityOrder[0];
        $priorityOrder[0] = $priorityOrder[$clickedItem[0] - 1];
        for ($i = 1; $i < $clickedItem[0]; $i++) {
            int $replaced2 = $priorityOrder[$i];
            $priorityOrder[$i] = $replaced;
            $replaced = $replaced2;
        }
    }
}

global proc updatePriority()
{
    // IF WE ADD MORE CATEGORIES, WE MUST UPDATE THIS FUNCTION!!!
    global int $priorityOrder[];
    // Send updated order to C++
    WorldPalette -po $priorityOrder[0] $priorityOrder[1] $priorityOrder[2] $priorityOrder[3];
}

global proc fillPriority()
{
    // IF WE ADD MORE CATEGORIES, WE MUST UPDATE THIS FUNCTION!!!
    global string $scrollPriority;
    global int $priorityOrder[];
    for ($i = 0; $i < 4; $i++) {
        switch($priorityOrder[$i]) {
            case 0:
                textScrollList -e -a "GRASS" $scrollPriority;
                break;
            case 1:
                textScrollList -e -a "ROCK" $scrollPriority;
                break;
            case 2:
                textScrollList -e -a "SHRUB" $scrollPriority;
                break;
            case 3:
                textScrollList -e -a "TREE" $scrollPriority;
                break;
            default:
                break;
        }
    }
}

global proc deleteCurrentSelectRegion()
{
    global int $selectionType;
    global string $selectionRegion[];

    // Delete current selection region (if there is one)
    if ($selectionType) {
        select -r $selectionRegion[0];
        delete;
        $selectionType = 0;

        // We must also reset the move GUI tools related to this

        // Selection region sliders
        global int $isMoveDistributionActive;
        global string $moveXSlider;
        global string $moveZSlider;
        global string $widthSlider;
        global string $heightSlider;
        global string $moveButton;
        // Reset slider values
        floatSliderGrp -e -v 0 $moveXSlider;
        floatSliderGrp -e -v 0 $moveZSlider;
        floatSliderGrp -e -v 1 $widthSlider;
        floatSliderGrp -e -v 1 $heightSlider;
        // Disable width/height sliders
        floatSliderGrp -e -en false $widthSlider;
        floatSliderGrp -e -en false $heightSlider;
        // Stop moving the distribution immediately
        $isMoveDistributionActive = false;
        iconTextButton -e -l "Start Moving Distribution" $moveButton;

    }
}

global proc makePlanarSelectRegion()
{
    global string $selectionMat;
    global string $selectionRegion[];
    global int $selectionType;
    global string $selectionLayer;
    global int $isTerrainLoaded;

    // Selection region sliders
    global string $widthSlider;
    global string $heightSlider;

    int $res = 10; // plane resolution
    if ($selectionType != 1) {
        // Create a 2-D selection bound from a plane
        $selectionRegion = `polyPlane -name "selectionRegion" -sw $res -sh $res`;
        scale -r 2 2 2;
        
        // Assign selection material to plane
        hyperShade -assign $selectionMat;
        $selectionType = 1;
        // Add the plane to selectionLayer
        layerEditorAddObjects $selectionLayer;
        
        // Map region vertices to terrain height (if there is terrain)
        if ($isTerrainLoaded) {
            WorldPalette -msr true;
        }
        select -cl  ; // deselect
        // Enable width & height sliders
        floatSliderGrp -e -en true $widthSlider;
        floatSliderGrp -e -en true $heightSlider;
    }
}

global proc makeRadialSelectRegion()
{
    global string $selectionMat;
    global string $selectionRegion[];
    global int $selectionType;
    global string $selectionLayer;
    global int $isTerrainLoaded;

    // Selection region width slider
    global string $widthSlider;

    int $res = 20; // disk resolution
    if ($selectionType != 2) {
        // Create a 2-D selection bound from a disc
        $selectionRegion = `polyCylinder -name "selectionRegion" -height 0.010 -sx $res -sz $res`;
        
        // Assign selection material to disc
        hyperShade -assign $selectionMat;
        $selectionType = 2;
        // Add the disc to selectionLayer
        layerEditorAddObjects $selectionLayer;
        
        // Map region vertices to terrain height (if there is terrain)
        if ($isTerrainLoaded) {
            WorldPalette -msr true;
        }
        select -cl  ; // deselect
        // Enable width slider
        floatSliderGrp -e -en true $widthSlider;
    }
}

global proc focusOnCurrentSelection()
{
    global string $selectionRegion[];
    global int $selectionType;
    if ($selectionType) {
        select -r $selectionRegion[0];
        viewFit -f 0.;
        select -cl  ; // deselect
    }
}

global proc changeMoveStatus()
{
    global int $isMoveDistributionActive;
    global string $moveButton;

    $isMoveDistributionActive = ! $isMoveDistributionActive; // revert status
    if ($isMoveDistributionActive) {
        iconTextButton -e -l "Stop Moving Distribution" $moveButton;
        global string $selectionRegion[];
        global int $selectionType;
        // Get region properties
        float $width = 0;
        float $height = 0;
        float $bb[]; // bound box
        float $wp[]; // world position
        if ($selectionType == 1) {
            // PLANAR
            $width = `polyPlane -q -w $selectionRegion`;
            $height = `polyPlane -q -h $selectionRegion`;
            $bb = `exactWorldBoundingBox $selectionRegion`;
            $wp = `xform -q -ws -t $selectionRegion`;
        } else if ($selectionType == 2) {
            // RADIAL
            $width = `polyCylinder -q -r $selectionRegion[0]`;
            $bb = `exactWorldBoundingBox selectionRegion`;
            $wp = `xform -q -ws -t $selectionRegion`;
        }
        // Set current distribution on the C++ side (aka get the list of geoms inside the selection region)
        WorldPalette -sm true -st $selectionType -w $width -h $height -wp $wp[0] $wp[1] $wp[2] -mib $bb[0] $bb[1] $bb[2] -mab $bb[3] $bb[4] $bb[5];
    } else {
        iconTextButton -e -l "Start Moving Distribution" $moveButton;
    }
}

global proc changeResizeStatus()
{
    global int $isResizeDistributionActive;
    global string $resizeButton;

    $isResizeDistributionActive = ! $isResizeDistributionActive; // revert status
    if ($isResizeDistributionActive) {
        iconTextButton -e -l "Stop Resizing Distribution" $resizeButton;
        global string $selectionRegion[];
        global int $selectionType;
        // Get region properties
        float $width = 0;
        float $height = 0;
        float $bb[]; // bound box
        float $wp[]; // world position
        if ($selectionType == 1) {
            // PLANAR
            $width = `polyPlane -q -w $selectionRegion`;
            $height = `polyPlane -q -h $selectionRegion`;
            $bb = `exactWorldBoundingBox $selectionRegion`;
            $wp = `xform -q -ws -t $selectionRegion`;
        } else if ($selectionType == 2) {
            // RADIAL
            $width = `polyCylinder -q -r $selectionRegion[0]`;
            $bb = `exactWorldBoundingBox selectionRegion`;
            $wp = `xform -q -ws -t $selectionRegion`;
        }
        // Set current distribution on the C++ side (aka get the list of geoms inside the selection region)
        WorldPalette -sr true -st $selectionType -w $width -h $height -wp $wp[0] $wp[1] $wp[2] -mib $bb[0] $bb[1] $bb[2] -mab $bb[3] $bb[4] $bb[5];
    } else {
        iconTextButton -e -l "Start Resizing Distribution" $resizeButton;
    }
}

global proc moveAlongAxis(int $axis)
{
    global string $selectionRegion[];
    global int $selectionType;
    global int $isTerrainLoaded;

    // Selection region move sliders
    global string $moveXSlider;
    global string $moveZSlider;
    global int $isMoveDistributionActive;

    float $val = 0; // coordinate value
    float $dx = 0; // change in x-position
    float $dz = 0; // change in z-position
    if ($selectionType) {
        select -r $selectionRegion[0];
        if ($axis == 0) {
            // Add onto current X position
            $val = `floatSliderGrp -q -v $moveXSlider`;
            $dx = $val - (getAttr ($selectionRegion[0] + ".translateX"));
            move -x $val;
        } else if ($axis == 1) {
            // Add onto current Z position
            $val = `floatSliderGrp -q -v $moveZSlider`;
            $dz = $val - (getAttr ($selectionRegion[0] + ".translateZ"));
            move -z $val;
        }
        select -cl  ; // deselect

        // False: Move selection region
        // True: Move distribution within selection region
        if ($isMoveDistributionActive) {
            // Map region vertices to terrain height (if there is terrain)
            if ($isTerrainLoaded) {
                if ($axis == 0) {
                    WorldPalette -msr true -dx $dx;
                } else if ($axis == 1) {
                    WorldPalette -msr true -dz $dz;
                }
            } else {
                if ($axis == 0) {
                    WorldPalette -dx $dx;
                } else if ($axis == 1) {
                    WorldPalette -dz $dz;
                }
            }
        } else {
            // Map region vertices to terrain height (if there is terrain)
            if ($isTerrainLoaded) {
                WorldPalette -msr true;
            }
        }
    }
}

// Same function as moveAlongAxis except the region is moved with hotkeys instead
global proc moveAlongAxisHotkey(int $axis, int $value) 
{
    /*global string $selectionRegion[];
    global int $selectionType;
    global int $isTerrainLoaded;

    // Selection region move sliders
    global string $moveXSlider;
    global string $moveZSlider;
    global int $isMoveDistributionActive;

    float $val = 0; // coordinate value
    float $dx = 0; // change in x-position
    float $dz = 0; // change in z-position
    if ($selectionType) {
        select -r $selectionRegion[0];
        if ($axis == 0) {
            // Add onto current X position
            $val = (getAttr ($selectionRegion[0] + ".translateX"));
            $dx = $value;
            move -x ($val + $dx);
            // Update the slider value as well
            floatSliderGrp -e -v ($val + $dx) $moveXSlider;
        } else if ($axis == 1) {
            // Add onto current Z position
            $val = (getAttr ($selectionRegion[0] + ".translateZ"));
            $dz = $value;
            move -z ($val + $dz);
            // Update the slider value as well
            floatSliderGrp -e -v ($val + $dz) $moveZSlider;
        }
        select -cl  ; // deselect

        // False: Move selection region
        // True: Move distribution within selection region
        if ($isMoveDistributionActive) {
            // Map region vertices to terrain height (if there is terrain)
            if ($isTerrainLoaded) {
                if ($axis == 0) {
                    WorldPalette -msr true -dx $dx;
                } else if ($axis == 1) {
                    WorldPalette -msr true -dz $dz;
                }
            } else {
                if ($axis == 0) {
                    WorldPalette -dx $dx;
                } else if ($axis == 1) {
                    WorldPalette -dz $dz;
                }
            }
        } else {
            // Map region vertices to terrain height (if there is terrain)
            if ($isTerrainLoaded) {
                WorldPalette -msr true;
            }
        }
    }*/
    print $value;
}

global proc scaleRegion(int $axis)
{
    // Selection region state
    global string $selectionRegion[];
    global int $selectionType;
    global int $isMoveDistributionActive;

    // Selection region sliders
    global string $widthSlider;
    global string $heightSlider;
    global int $isResizeDistributionActive;

    // Terrain state
    global int $isTerrainLoaded;

    float $width = 0; // width of region
    float $height = 0; // height of region
    float $dw = 0; // change in width
    float $dh = 0; // change in height
    if ($selectionType) {
        if ($selectionType == 1) {
            select -r $selectionRegion[0];
            if ($axis == 0) {
                $width = `floatSliderGrp -q -v $widthSlider`;
                $dw = $width - (getAttr ($selectionRegion[1] + ".width"));
                // increase/decrease width
                setAttr ($selectionRegion[1] + ".width") ($width);
            } else if ($axis == 1) {
                $height = `floatSliderGrp -q -v $heightSlider`;
                $dh = $height - (getAttr ($selectionRegion[1] + ".height"));
                // increase/decrease height
                setAttr ($selectionRegion[1] + ".height") ($height);
            }
        } else if ($selectionType == 2) {
            select -r $selectionRegion[0];
            if ($axis == 0) {
                $width = `floatSliderGrp -q -v $widthSlider`;
                $dw = $width - (getAttr ($selectionRegion[1] + ".radius"));
                // increase/decrease radius
                setAttr ($selectionRegion[1] + ".radius") ($width);
            }
        }
        select -cl  ; // deselect

        // False: Resize selection region
        // True: Resize distribution within selection region
        if ($isResizeDistributionActive) {
            // Map region vertices to terrain height (if there is terrain)
            WorldPalette -msr $isTerrainLoaded -dw $dw -dh $dh;
        } else {
            // Map region vertices to terrain height (if there is terrain)
            WorldPalette -msr $isTerrainLoaded;
        }

        // Also update the selection region for moving the distribution
        // Get other region properties
        float $bb[] = `exactWorldBoundingBox $selectionRegion`;
        float $wp[] = `xform -q -ws -t $selectionRegion`;
        if ($isMoveDistributionActive) {
            WorldPalette -sm true -st $selectionType -w $width -h $height -wp $wp[0] $wp[1] $wp[2] -mib $bb[0] $bb[1] $bb[2] -mab $bb[3] $bb[4] $bb[5];
        }
    }
}

global proc saveSelection()
{
    global string $selectionRegion[];
    global int $selectionType;
    if ($selectionType) {
        global string $palette[];
        global int $paletteOccupancy[];
        global int $numSlots;
        global int $freeIdx;
        
        // Create the image for this button
        string $ws=`workspace -q -fullName`;
        string $wsp=$ws + "/WorldPalette/images";
        sysFile -makeDir $wsp;
        string $imgFile = $wsp + "/palette" + $freeIdx + ".png";
        
        lookThru top; // look through the top camera
        focusOnCurrentSelection;
        setAttr ("SelectionLayer" + ".visibility") 0; // Don't show the GUI geometry in the screenshot
        refresh -cv -fe "png" -fn $imgFile; // take the screenshot
        setAttr ("SelectionLayer" + ".visibility") 1; // Put the GUI geometry back in
        lookThru persp; // go back to perspective view
        
        iconTextButton -e -i $imgFile $palette[$freeIdx]; // set slot image to screenshot
        iconTextButton -e -en true $palette[$freeIdx]; // make the button selectable
        
        if (!$paletteOccupancy[$freeIdx]) {
            // This slot is free - fill it
            $paletteOccupancy[$freeIdx] = 1;
        }
        
        // Send data to save the distribution
        float $width = 0;
        float $height = 0;
        float $boundBox[];
        float $worldPos[];
        if ($selectionType == 1) {
            // PLANAR
            $width = `polyPlane -q -w $selectionRegion`;
            $height = `polyPlane -q -h $selectionRegion`;
            $boundBox = `exactWorldBoundingBox $selectionRegion`;
            $worldPos = `xform -q -ws -t $selectionRegion`;
            WorldPalette -st 1 -w $width -h $height -wp $worldPos[0] $worldPos[1] $worldPos[2] -mib $boundBox[0] $boundBox[1] $boundBox[2] -mab $boundBox[3] $boundBox[4] $boundBox[5] -pi $freeIdx -ge true;
        } else if ($selectionType == 2) {
            // RADIAL
            $width = `polyCylinder -q -r $selectionRegion[0]`;
            $boundBox = `exactWorldBoundingBox selectionRegion`;
            $worldPos = `xform -q -ws -t $selectionRegion`;
            WorldPalette -st 2 -w $width -wp $worldPos[0] $worldPos[1] $worldPos[2] -mib $boundBox[0] $boundBox[1] $boundBox[2] -mab $boundBox[3] $boundBox[4] $boundBox[5] -pi $freeIdx -ge true;
        }
        // Update the free slot index
        $freeIdx = $freeIdx + 1;
        if ($freeIdx == $numSlots) {
            $freeIdx = 0; // set back to idx 0
        }
    }
}

global proc getDistributionFromPalette(int $index)
{
    global int $currentSlot;
    global string $palette[];
    
    // Update currently selected slot
    if ($currentSlot != -1) {
        iconTextButton -e -nbg true $palette[$currentSlot];
    }
    $currentSlot = $index;
    
    print ("Current selection: " + $currentSlot);
    iconTextButton -e -ebg true -bgc 0 0.75 1 $palette[$currentSlot];
    
    // This is where we will set the brush stroke to use the given distribution!
    WorldPalette -ge true -pi $currentSlot;
}

global proc updatePalette()
{
    global string $palette[];
    global int $paletteOccupancy[];
    global int $numSlots;
    global int $currentSlot;
    // Set the palette images accordingly
    // Free slot = default image (sphere.png) for now; Occupied = top view img
    
    // Get the image directory
    string $ws = `workspace -q -fullName`;
    string $wsp = $ws + "/WorldPalette/images";
    sysFile -makeDir $wsp; // creates the image directory (if one doesn't already exist)
    
    for ($i = 0; $i < $numSlots; $i++) {
        if ($paletteOccupancy[$i]) {
            // Make the button clickable
             iconTextButton -e -en true $palette[$i];
            // Set button image to top view image if slot is occupied
            string $imgFile = $wsp + "/palette" + $i + ".png";
            if ($currentSlot == $i) {
                // Mark this button as currently selected
                iconTextButton -e -i $imgFile -ebg true -bgc 0 0.75 1 $palette[$i];
            } else {
                iconTextButton -e -i $imgFile $palette[$i];
            }
        }
    }
}

global proc loadDefaultScene()
{
    // We want to stop the distribution move tool because we're basically changing all scene geometry information
    global int $isMoveDistributionActive;
    global string $moveButton;
    $isMoveDistributionActive = false;
    iconTextButton -e -l "Start Moving Distribution" $moveButton;

    global int $numTerrainLoads;
    global string $terrainName;
    global string $treeName;
    global string $rockName;
    global string $shrubName;
    global string $grassName;

    // Delete all geometry in the scene first
    string $objects[] = `listTransforms -geometry`;
    for ($geom in $objects) {
        if ($geom == "selectionRegion") {
            continue;
        }
        if ($geom == $treeName || $geom == $rockName || $geom == $shrubName || $geom == $grassName) {
            continue;
        }
        if ($geom == $terrainName) {
            continue;
        }
        delete $geom;
    }
    
    // Create a bunch of scene objects
    int $numPrims = 6;
    for ($i = 0; $i < $numPrims; $i++) {
        int $t = 3; // TREE
        float $rx = `rand -2 2`;
        float $rz = `rand -2 2`;
        addSceneGeometryAtLoc($t, $rx, 0, $rz);
    }

    int $numPrims2 = 6;
    for ($i = 0; $i < $numPrims2; $i++) {
        int $t = 2; // SHRUB
        float $rx = `rand -3 3`;
        float $rz = `rand -3 3`;
        addSceneGeometryAtLoc($t, $rx, 0, $rz);
    }

    int $numPrims3 = 20;
    for ($i = 0; $i < $numPrims3; $i++) {
        int $t = 1; // ROCK
        float $rx = `rand -4 4`;
        float $rz = `rand -4 4`;
        addSceneGeometryAtLoc($t, $rx, 0, $rz);
    }
    
    int $numPrims4 = 40;
    for ($i = 0; $i < $numPrims4; $i++) {
        int $t = 0; // GRASS
        float $rx = `rand -5 5`;
        float $rz = `rand -5 5`;
        addSceneGeometryAtLoc($t, $rx, 0, $rz);
    }
    select -cl  ; // deselect
}

global proc pasteDistribution()
{
    global int $currentSlot; // A slot must be selected first for pasting distributions
    global string $selectionRegion[];
    global int $selectionType; // There must be a selection region
    if ($currentSlot != -1) {
        if ($selectionType) {
            float $width = 0;
            float $height = 0;
            float $boundBox[];
            float $worldPos[];
            if ($selectionType == 1) {
                // PLANAR
                $width = `polyPlane -q -w $selectionRegion`;
                $height = `polyPlane -q -h $selectionRegion`;
                $boundBox = `exactWorldBoundingBox $selectionRegion`;
                $worldPos = `xform -q -ws -t $selectionRegion`;
                WorldPalette -st 1 -w $width -h $height -wp $worldPos[0] $worldPos[1] $worldPos[2] -mib $boundBox[0] $boundBox[1] $boundBox[2] -mab $boundBox[3] $boundBox[4] $boundBox[5] -pi $currentSlot -ge false;
            } else if ($selectionType == 2) {
                // RADIAL
                $width = `polyCylinder -q -r $selectionRegion[0]`;
                $boundBox = `exactWorldBoundingBox selectionRegion`;
                $worldPos = `xform -q -ws -t $selectionRegion`;
                WorldPalette -st 2 -w $width -wp $worldPos[0] $worldPos[1] $worldPos[2] -mib $boundBox[0] $boundBox[1] $boundBox[2] -mab $boundBox[3] $boundBox[4] $boundBox[5] -pi $currentSlot -ge false;
            }
        } else {
            confirmDialog -t "No Region Selected" -m "You must first create a selection region on canvas." -b "OK" -icn "warning";
        }
    } else {
        confirmDialog -t "No Slot Selected" -m "You must first select a distribution from the palette." -b "OK" -icn "warning";
    }
}

global proc changeBrushStatus()
{
    global string $brushDragContext;
    global int $isBrushActive;
    global string $brushButton;

    $isBrushActive = ! $isBrushActive; // revert status
    if ($isBrushActive) {
        iconTextButton -e -l "Stop Brush" $brushButton;
        // Set tool to brush
        setToolTo $brushDragContext;
    } else {
        iconTextButton -e -l "Use Brush" $brushButton;
        // Set tool back to selection
        setToolTo selectSuperContext;
    }
}

global proc changeBrushWidth(int $mode)
{
    global float $brushWidth;
    switch($mode) {
        case 0:
            // decrement
            if ($brushWidth > 0.5) {
                $brushWidth -= 0.5;
            }
            break;
        case 1:
            // increment
            if ($brushWidth < 5.0) {
                $brushWidth += 0.5;
            }
            break;
        default:
            break;
    }
}

global proc brushInitialize()
{
    // This function handles brush usage for the case where the user activates brush by clicking on the Maya side menu
    global int $isBrushActive;
    global string $brushButton;

    $isBrushActive = true;
    iconTextButton -e -l "Stop Brush" $brushButton;
}

global proc brushFinalize()
{
    // This function handles brush usage for the case where the user deactivates brush by clicking on the Maya side menu
    global int $isBrushActive;
    global string $brushButton;

    $isBrushActive = false;
    iconTextButton -e -l "Use Brush" $brushButton;
}

global proc brushPress()
{
    float $pressPosition[] = `autoPlace -um`;
    WorldPalette -sb true -sbp $pressPosition[0] $pressPosition[2]; // send stroke position to C++
}

global proc brushDrag()
{
    global float $lastDragPosition[]; // last brush drag position
    global int $first; // is this the first brush stroke during drag?

    float $dragPosition[] = `autoPlace -um`;
    if ($first) {
        $first = false;
        WorldPalette -sb true -sbp $dragPosition[0] $dragPosition[2]; // send stroke position to C++
    } else {
        float $dx = $dragPosition[0] - $lastDragPosition[0];
        float $dz = $dragPosition[2] - $lastDragPosition[2];
        if ($dx > 0.01 || $dx < -0.01 || $dz > 0.01 || $dz < -0.01) {
            WorldPalette -sb true -sbp $dragPosition[0] $dragPosition[2]; // send stroke position to C++
        }
    }
    $lastDragPosition = `autoPlace -um`;
}

global proc brushRelease()
{
    global int $first;
    global float $brushWidth;
    $first = true; // reset first brush stroke status
    // TO DO: Send brush width to be used for pasting distribution
    WorldPalette -rb true -bw $brushWidth;
}

global proc addSceneGeom(int $type)
{
    global string $treeName;
    global string $rockName;
    global string $shrubName;
    global string $grassName;

    // This one generates the geometry at the origin
    switch($type) {
        case 0:
            // GRASS
            showHidden $grassName;
            select -r $grassName;
            duplicate -rr;
            hide $grassName;
            break;
        case 1:
            // ROCK
            showHidden $rockName;
            select -r $rockName;
            duplicate -rr;
            hide $rockName;
            break;
        case 2:
            // SHRUB
            showHidden $shrubName;
            select -r $shrubName;
            duplicate -rr;
            hide $shrubName;
            break;
        case 3:
            // TREE
            showHidden $treeName;
            select -r $treeName;
            duplicate -rr;
            hide $treeName;
            break;
        default:
            break;
    }
}

global proc addSceneGeometryAtLoc(int $type, float $wx, float $wy, float $wz)
{
    global int $isTerrainLoaded;
    // This one generates the geometry at given location
    addSceneGeom($type);
    move -x $wx -z $wz;
    // Update the y-position if there is terrain
    if ($isTerrainLoaded) {
        string $selected[] = `ls -sl`;
        WorldPalette -ugh $selected[0];
    }
}

global proc importSceneOBJs()
{
    // OBJ paths
    global string $treeOBJ;
    global string $rockOBJ;
    global string $shrubOBJ;
    global string $grassOBJ;
    
    // Import objects for tree and rock (UPDATE THIS FUNCTION IF MORE OBJECTS ARE SUPPORTED)
    file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "rock" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $rockOBJ; // ROCK
    file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "tree" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $treeOBJ; // TREE
    file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "shrub" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $shrubOBJ; // SHRUB
    file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "grass" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $grassOBJ; // GRASS

    // Hide these imported meshes
    hide tree:Tree;
    hide rock:Rock;
    hide shrub:Shrub;
    hide grass:Grass;
}

global proc uploadUserTree()
{
    // Current tree OBJ path
    global string $treeOBJ;
    global string $treeName;
    global int $numTreeLoads;

    // Have user select a new file
    string $opened = `fileDialog -dm "*.obj"`;
    if (size($opened) > 0) {
        // User selected a new tree OBJ file successfully - replace the default path
        $treeOBJ = $opened;
        // Replace the main hidden tree mesh to duplicate
        delete $treeName;
        $numTreeLoads += 1;
        file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "tree" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $treeOBJ; // TREE
        $treeName = ("tree" + $numTreeLoads + ":Tree");
        WorldPalette -setTreeOBJ $treeName;
        hide $treeName;
    }
}

global proc uploadUserRock()
{
    // Current rock OBJ path
    global string $rockOBJ;
    global string $rockName;
    global int $numRockLoads;

    // Have user select a new file
    string $opened = `fileDialog -dm "*.obj"`;
    if (size($opened) > 0) {
        // User selected a new rock OBJ file successfully - replace the default path
        $rockOBJ = $opened;
        // Replace the main hidden rock mesh to duplicate
        delete $rockName;
        $numRockLoads += 1;
        file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "rock" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $rockOBJ; // ROCK
        $rockName = ("rock" + $numRockLoads + ":Rock");
        WorldPalette -setRockOBJ $rockName;
        hide $rockName;
    }
}

global proc uploadUserShrub()
{
    // Current shrub OBJ path
    global string $shrubOBJ;
    global string $shrubName;
    global int $numShrubLoads;

    // Have user select a new file
    string $opened = `fileDialog -dm "*.obj"`;
    if (size($opened) > 0) {
        // User selected a new shrub OBJ file successfully - replace the default path
        $shrubOBJ = $opened;
        // Replace the main hidden shrub mesh to duplicate
        delete $shrubName;
        $numShrubLoads += 1;
        file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "shrub" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $shrubOBJ; // SHRUB
        $shrubName = ("shrub" + $numShrubLoads + ":Shrub");
        WorldPalette -setShrubOBJ $shrubName;
        hide $shrubName;
    }
}

global proc uploadUserGrass()
{
    // Current grass OBJ path
    global string $grassOBJ;
    global string $grassName;
    global int $numGrassLoads;

    // Have user select a new file
    string $opened = `fileDialog -dm "*.obj"`;
    if (size($opened) > 0) {
        // User selected a new grass OBJ file successfully - replace the default path
        $grassOBJ = $opened;
        // Replace the main hidden grass mesh to duplicate
        delete $grassName;
        $numGrassLoads += 1;
        file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "grass" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $grassOBJ; // GRASS
        $grassName = ("grass" + $numGrassLoads + ":Grass");
        WorldPalette -setGrassOBJ $grassName;
        hide $grassName;
    }
}

global proc loadTerrain()
{
    global int $isTerrainLoaded;
    global int $numTerrainLoads;
    global int $selectionType;
    if ($isTerrainLoaded) {
        // There is already a terrain - user must delete it first
        confirmDialog -t "Load Terrain" -m "There already exists a terrain. You must delete this existing terrain first." -b "OK" -icn "warning";
    } else {
        global string $terrainName;
        // Get the terrain directory - have user select the file
        string $opened = `fileDialog -dm "terrain*.obj"`;
        if (size($opened) > 0) {
            // Update terrain file    
            string $terName[];
            file -import -type "OBJ"  -ignoreVersion -ra true -mergeNamespacesOnClash false -namespace "terrain" -options "mo=1" -pr -importFrameRate true -importTimeRange "override" $opened;
            $numTerrainLoads += 1;
            // Get terrain name
            if ($numTerrainLoads) {
                select -r ("terrain" + $numTerrainLoads + ":*");
            } else {
                select -r "terrain:*";
            }
            $terName = `ls -sl -tr`;
            $terrainName = $terName[0];
            WorldPalette -tn $terrainName -tw 50 -th 50 -tsw 100 -tsh 100;
            $isTerrainLoaded = true;
            // Map selection region vertices to terrain height (if there is selection region)
            if ($selectionType) {
                WorldPalette -msr true;
            }
            select -cl;
        }
    }
}

global proc deleteTerrain()
{
    global int $isTerrainLoaded;
    global int $numTerrainLoads;
    global int $selectionType;
    if ($isTerrainLoaded) {
        global string $terrainName;
        select -r $terrainName;
        delete;
        $isTerrainLoaded = false;
        WorldPalette -ut true; // uninitialize terrain
        // Map selection region vertices to zero height (if there is selection region)
        if ($selectionType) {
            int $count[] = `polyEvaluate -v "selectionRegion"`;
            for ($idx = 0; $idx < $count[0]; $idx++) {
                select -r selectionRegion.vtx[$idx];
                move -y 0;
            }
            select -cl;
        }
    } else {
        // There isn't a terrain to delete
        confirmDialog -t "Delete Terrain" -m "There is no terrain." -b "OK" -icn "warning";
    }
}

global proc closeWindow()
{
    global int $isGUIOpen;
    $isGUIOpen = false;
}

global proc ShowGUI()
{
    global int $isGUIOpen;
    // Get the necessary global variables
    // Selection region radio buttons
    global string $noSelect;
    global string $planarSelect;
    global string $radialSelect;

    // Selection region attribute sliders
    global int $isMoveDistributionActive;
    global string $moveXSlider;
    global string $moveZSlider;
    global string $moveButton;
    global int $isResizeDistributionActive;
    global string $widthSlider;
    global string $heightSlider;
    global string $resizeButton;

    global string $brushButton;
    global string $modeCollection;
    global int $selectionType;
    // Priority Order
    global string $scrollPriority;
    // Palette
    global string $palette[];
    // Get the path for the object icons
    string $ws = `workspace -q -fullName`;
    string $iconDir = $ws + "/WorldPalette/icons/";
    // Create the GUI window
    string $window = `window -title "WorldPalette GUI" -s 0 -w 400 -cc closeWindow`;
        columnLayout -adjustableColumn true;
            frameLayout -label "Selection" -collapsable true;
                frameLayout -label "Selection Mode";
                    rowColumnLayout -numberOfColumns 3 -columnWidth 1 125 -columnWidth 2 125 -columnWidth 3 125 -cs 1 5 -cs 2 10 -cs 3 10;
                        $modeCollection = `radioCollection`;
                        $noSelect = `radioButton -l "No Selection" -onc deleteCurrentSelectRegion`;
                        $planarSelect = `radioButton -l "Planar Selection" -onc makePlanarSelectRegion -ofc deleteCurrentSelectRegion`;
                        $radialSelect = `radioButton -l "Radial Selection" -onc makeRadialSelectRegion -ofc deleteCurrentSelectRegion`;
                    setParent ..;
                frameLayout -label "Move Selection";
                    rowColumnLayout -numberOfColumns 1 -co 1 "both" 5;
                        $moveXSlider = `floatSliderGrp -label "X Position" -w 400 -field true -min -50 -max 50 -s 1 -cal 1 "center" -adj 1 -dc "moveAlongAxis(0)" -cc "moveAlongAxis(0)"`;
                        $moveZSlider = `floatSliderGrp -label "Z Position" -w 400 -field true -min -50 -max 50 -s 1 -cal 1 "center" -adj 1 -dc "moveAlongAxis(1)" -cc "moveAlongAxis(1)"`;
                    setParent ..;
                frameLayout -label "Resize Selection";
                    rowColumnLayout -numberOfColumns 1 -columnWidth 1 400;
                        $widthSlider = `floatSliderGrp -label "Width" -en false -w 400 -field true -min 1 -max 10 -s 0.5 -cal 1 "center" -adj 1 -dc "scaleRegion(0)" -cc "scaleRegion(0)"`;
                        $heightSlider = `floatSliderGrp -label "Height" -en false -w 400 -field true -min 1 -max 10 -s 0.5 -cal 1 "center" -adj 1 -dc "scaleRegion(1)" -cc "scaleRegion(1)"`;
                    setParent ..;
                frameLayout -label "Editing Tools";
                    rowColumnLayout -numberOfColumns 2 -cw 1 200 -cw 2 200 -ro 1 "top" 5;
                        $moveButton = `iconTextButton -w 200 -h 35 -style "iconAndTextHorizontal" -i "Grab.png" -label "Start Moving Distribution" -c changeMoveStatus`;
                        $resizeButton = `iconTextButton -w 200 -h 35 -style "iconAndTextHorizontal" -i "Grab.png" -label "Start Resizing Distribution" -c changeResizeStatus`;
                    setParent ..;
                frameLayout -label "Other Options";
                    rowColumnLayout -numberOfColumns 2 -columnWidth 1 195 -columnWidth 2 195 -rs 1 5 -cs 1 5 -cs 2 5;
                        button -l "Focus On Selection Region" -c focusOnCurrentSelection;
                        button -l "Save Selection to Palette" -c saveSelection;
                    setParent ..;
            setParent $window;
            frameLayout -label "Distribution" -collapsable true;
                frameLayout -label "Priority Order";
                    rowColumnLayout -numberOfColumns 2 -columnWidth 1 195 -columnWidth 2 195 -rs 1 5 -cs 1 5 -cs 2 10 -ro 1 "top" 5;
                        $scrollPriority = `textScrollList -numberOfRows 3 -dcc reorderPriority`;
                        button -l "Update Priority" -c updatePriority -h 25;
                    setParent ..;
                frameLayout -label "Palette";
                    rowColumnLayout -nc 6 -cw 1 50 -cw 2 50 -cw 3 50 -cw 4 50 -cw 5 50 -cw 6 100 -rs 1 5 -rs 2 5 -cs 1 5 -cs 2 5 -cs 3 5 -cs 4 5 -cs 5 5 -cs 6 15;
                    $palette[0] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(0)"`;
                    $palette[1] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(1)"`;
                    $palette[2] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(2)"`;
                    $palette[3] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(3)"`;
                    $palette[4] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(4)"`;
                    iconTextButton -w 100 -h 50 -style "iconAndTextHorizontal" -i "Imprint.png" -label "Paste Distribution" -c pasteDistribution;
                    //button -l "Paste Distribution" -c pasteDistribution -w 100;
                    $palette[5] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(5)"`;
                    $palette[6] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(6)"`;
                    $palette[7] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(7)"`;
                    $palette[8] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(8)"`;
                    $palette[9] = `iconTextButton -st "iconOnly" -en false -i "sphere.png" -w 50 -h 50 -c "getDistributionFromPalette(9)"`;
                    setParent ..;
            setParent $window;
            frameLayout -label "Brush" -collapsable true;
                rowColumnLayout -numberOfColumns 1 -columnWidth 1 400;
                    $brushButton = `iconTextButton -w 400 -h 50 -style "iconAndTextHorizontal" -al "center" -i "art3dPaint.png" -label "Use Brush" -c changeBrushStatus`;
                rowColumnLayout -numberOfColumns 2 -columnWidth 1 195 -columnWidth 2 195 -rs 1 5 -cs 1 5 -cs 2 5;
                    button -l "Increase Width" -c "changeBrushWidth(1)"; button -l "Decrease Width" -c "changeBrushWidth(0)";
            setParent $window;        
            frameLayout -label "Scene" -collapsable true;
                frameLayout -label "Creation";
                    rowColumnLayout -numberOfColumns 2 -columnWidth 1 195 -columnWidth 2 195 -rs 1 5 -cs 1 5 -cs 2 5;
                        button -l "Load Default Scene" -c loadDefaultScene;
                        button -l "Paste Distribution" -c pasteDistribution;
                        iconTextButton -st "iconAndTextHorizontal" -l "Add Custom Tree" -i ($iconDir + "tree.png") -w 35 -h 35 -c "uploadUserTree";
                        iconTextButton -st "iconAndTextHorizontal" -l "Add Custom Rock" -i ($iconDir + "big_rock.png") -w 35 -h 35 -c "uploadUserRock";
                        iconTextButton -st "iconAndTextHorizontal" -l "Add Custom Shrub" -i ($iconDir + "shrub.png") -w 35 -h 35 -c "uploadUserShrub";
                        iconTextButton -st "iconAndTextHorizontal" -l "Add Custom Grass" -i ($iconDir + "grass.png") -w 35 -h 35 -c "uploadUserGrass";
                        iconTextButton -st "iconAndTextHorizontal" -l "Load Terrain" -i ($iconDir + "terrain.png") -w 35 -h 35 -c "loadTerrain";
                        iconTextButton -st "iconAndTextHorizontal" -l "Delete Terrain" -i ($iconDir + "terrain_delete.png") -w 35 -h 35 -c "deleteTerrain";
                    setParent ..;
            setParent $window;
          
    // Find which radio button must be set active
    global string $selectionRegion[];
    if ($selectionType) {
        // Also update the selection region sliders
        float $xval = `getAttr ($selectionRegion[0] + ".translateX")`;
        float $zval = `getAttr ($selectionRegion[0] + ".translateZ")`;
        floatSliderGrp -e -v $xval $moveXSlider;
        floatSliderGrp -e -v $zval $moveZSlider;
        if ($selectionType == 1) {
            radioCollection -edit -select $planarSelect $modeCollection;
            // Enable the width slider and update its value
            floatSliderGrp -e -en true $widthSlider;
            float $width = `polyPlane -q -w $selectionRegion`;
            floatSliderGrp -e -v $width $widthSlider;
            // Enable the height slider and update its value
            floatSliderGrp -e -en true $heightSlider;
            float $height = `polyPlane -q -h $selectionRegion`;
            floatSliderGrp -e -v $height $heightSlider;
        } else if ($selectionType == 2) {
            radioCollection -edit -select $radialSelect $modeCollection;
            // Enable the width slider and update its value
            floatSliderGrp -e -en true $widthSlider;
            float $width = `polyCylinder -q -r $selectionRegion[0]`;
            floatSliderGrp -e -v $width $widthSlider;
        }
    } else {
        radioCollection -edit -select $noSelect $modeCollection;
        // Reset slider values
        floatSliderGrp -e -v 0 $moveXSlider;
        floatSliderGrp -e -v 0 $moveZSlider;
        floatSliderGrp -e -v 1 $widthSlider;
        floatSliderGrp -e -v 1 $heightSlider;
        // Stop moving the distribution immediately
        $isMoveDistributionActive = false;
        iconTextButton -e -l "Start Moving Distribution" $moveButton;
        // Stop resizing the distribution immediately
        $isResizeDistributionActive = false;
        iconTextButton -e -l "Start Resizing Distribution" $resizeButton;
    }
    // Append the items to priority order scroll in correct order
    fillPriority;
    // Update palette images
    updatePalette;
    
    showWindow;
    $isGUIOpen = true;    
}

global proc resetState()
{
    global int $isGUIOpen;
    global int $selectionType;
    global int $selectionExists;
    global string $noSelect;
    global string $modeCollection;
    global string $selectionLayer;
    global string $selectionMat;
    global int $isTerrainLoaded;

    // OBJ load counters
    global int $numTerrainLoads;
    global int $numTreeLoads;
    global int $numRockLoads;
    global int $numShrubLoads;
    global int $numGrassLoads;

    // Reset terrain
    $isTerrainLoaded = false;
    $numTerrainLoads = -1;
    // Reset scene OBJ counts
    $numTreeLoads = 0;
    $numRockLoads = 0;
    $numShrubLoads = 0;
    $numGrassLoads = 0;
    // Recreate the selection layer
    $selectionLayer = `createDisplayLayer -e -name "SelectionLayer"`;
    setAttr ($selectionLayer + ".displayType") 2; // We don't want the user to manipulate it
    // Recreate the selection material
    $selectionMat = `shadingNode -name "selection" -asShader lambert`;
    setAttr "selection.color" -type double3 0.2 0.8 0.8;
    setAttr "selection.transparency" -type double3 0.85 0.85 0.85;
    select -cl  ;
    // Delete the selection region
    $selectionType = 0;
    $selectionExists = false;
    if ($isGUIOpen) {
        // Set the radio button to "no selection" if the GUI window is open
        radioCollection -edit -select $noSelect $modeCollection;
    }
    // Reset the scene objects
    importSceneOBJs(); // re-import scene OBJs
}

global string $gMainWindow;
setParent $gMainWindow;

// Set Y as up axis
setUpAxis "y";

/*
    GUI Items
*/

// Selection region type radio buttons
global string $noSelect;
global string $planarSelect;
global string $radialSelect;
global string $modeCollection;

// Selection region sliders
global string $moveXSlider;
global string $moveZSlider;
global string $widthSlider;
global string $heightSlider;

// Move distribution
global string $moveButton;

// Resize distribution
global string $resizeButton;

// Brush
global string $brushButton;

// Priority
global string $scrollPriority;

// Palette
global string $palette[];

/*
    State Variables
*/

global int $isGUIOpen = false; // is the GUI window open?

// OBJ paths (may be overwritten by user input)
global string $treeOBJ;
global string $rockOBJ;
global string $shrubOBJ;
global string $grassOBJ;

// Scene object import counts
global int $numTreeLoads = 0;
global int $numRockLoads = 0;
global int $numShrubLoads = 0;
global int $numGrassLoads = 0;
global string $treeName;
global string $rockName;
global string $shrubName;
global string $grassName;

// Move Distribution
global int $isMoveDistributionActive = false;

// Resize Distribution
global int $isResizeDistributionActive = false;

// Terrain
global string $terrainName;
global int $isTerrainLoaded = false;
global int $numTerrainLoads = -1;

// Priority Order
global int $priorityOrder[] = { 3, 2, 1, 0 }; // 0 = GRASS; 1 = ROCK; 2 = SHRUB; 3 = TREE (UPDATE THIS IF MORE CATEGORIES ARE ADDED!)

// Distribution Palette
global int $numSlots = 10;
global int $freeIdx = 0; // Use the slot at this index for saving
global int $paletteOccupancy[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // We only support 10 slots for now (0 = free, 1 = occupied)
global int $currentSlot = -1; // currently selected slot/distribution

// Brush
global int $isBrushActive = false;
global float $brushWidth = 0.5;
global string $brushDragContext; // draggerContext
global float $lastDragPosition[]; // last brush drag position
global int $first; // is this the first brush stroke during drag?

// Selection Shader
global string $selectionMat;

// Selection Region
global int $selectionExists = false;
global string $selectionRegion[];
global int $selectionType = 0;

// Create the selection display layer
global string $selectionLayer;
$selectionLayer = `createDisplayLayer -e -name "SelectionLayer"`;
setAttr ($selectionLayer + ".displayType") 2; // We don't want the user to manipulate it

// adds a new drop down menu
menu -l "World Palette"
-p MayaWindow
-to 1
-aob true
NewDropDownMenu;

// add an item to the drop down menu
menuItem -l "Show GUI"
-echoCommand true
-c ShowGUI
NewDropDownMenuItem1;

// Create selection shader
$selectionMat = `shadingNode -name "selection" -asShader lambert`;
setAttr "selection.color" -type double3 0.2 0.8 0.8;
setAttr "selection.transparency" -type double3 0.85 0.85 0.85;
select -cl  ;

// Set the brush dragger context
$brushDragContext = `draggerContext -i1 "brush.png" -inz "brushInitialize" -fnz "brushFinalize" -pc "brushPress" -dc  "brushDrag" -rc "brushRelease" -cursor "hand"`;

// Reset the selection region and scene objects if a new scene is created
scriptJob -event "SceneOpened" resetState;

// Set up default OBJ paths
string $ws = `workspace -q -fullName`;
string $objDir = $ws + "/WorldPalette/objects/";
$treeOBJ = $objDir + "tree.obj";
$rockOBJ = $objDir + "big_rock.obj";
$shrubOBJ = $objDir + "shrub.obj";
$grassOBJ = $objDir + "grass.obj";

// Set up scene object names
$treeName = "tree:Tree";
$rockName = "rock:Rock";
$shrubName = "shrub:Shrub";
$grassName = "grass:Grass";

// Set the hotkeys
/*runTimeCommand -commandLanguage "mel" -command ("print \"Hello\\n\"") moveSelRegionUp;
nameCommand -annotation "Move Up" -command "moveSelRegionUp" moveSelRegionUpName;
runTimeCommand -commandLanguage "mel" -command "moveAlongAxisHotkey" moveSelRegionDown;
nameCommand -annotation "Move Down" -command " moveSelRegionDown" moveSelRegionDownName;
runTimeCommand -commandLanguage "mel" -command "moveAlongAxisHotkey" moveSelRegionLeft;
nameCommand -annotation "Move Left" -command " moveSelRegionLeft" moveSelRegionLeftName;
runTimeCommand -commandLanguage "mel" -command "moveAlongAxisHotkey" moveSelRegionRight;
nameCommand -annotation "Move Right" -command "moveSelRegionRight" moveSelRegionRightName;
hotkey -k "Up" -sht -alt -name "moveSelRegionUpName";
hotkey -k "Down" -sht -alt -name "moveSelRegionDownName";
hotkey -k "Left" -sht -alt -name "moveSelRegionLeftName";
hotkey -k "Right" -sht -alt -name "moveSelRegionRightName";*/
// Import scene object meshes
importSceneOBJs();
