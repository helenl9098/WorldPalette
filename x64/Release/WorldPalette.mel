global proc reorderPriority()
{
    global string $scrollPriority;
    global int $priorityOrder[]; // this keeps track of the updates
    // Total number of items
    int $numItems = `textScrollList -q -ni $scrollPriority`;
    // Get selected item index
    int $clickedItem[] = `textScrollList -q -sii $scrollPriority`;
    // Get all items
    string $allItems[] = `textScrollList -q -ai $scrollPriority`;
    // If the first item is already the clicked item, do nothing
    if ($allItems[0] == $allItems[$clickedItem[0] - 1]) {
        return;
    } else {
        // Bring this item to the top
        textScrollList -e -ap 1 ($allItems[$clickedItem[0] - 1] + "") $scrollPriority;
        // Remove the item at the old position
        textScrollList -e -rii ($clickedItem[0] + 1) $scrollPriority;
        
        // Update the priority order array
        // Shift elements until you get to the moved item's index
        int $replaced = $priorityOrder[0];
        $priorityOrder[0] = $priorityOrder[$clickedItem[0] - 1];
        for ($i = 1; $i < $clickedItem[0]; $i++) {
            int $replaced2 = $priorityOrder[$i];
            $priorityOrder[$i] = $replaced;
            $replaced = $replaced2;
        }
        print "Testing:\n";
        for ($i = 0; $i < 3; $i++) {
            print $priorityOrder[$i];
        }
    }
}

global proc updatePriority()
{
    // IF WE ADD MORE CATEGORIES, WE MUST UPDATE THIS FUNCTION!!!
    global int $priorityOrder[];
    // Send updated order to C++
    WorldPalette -po $priorityOrder[0] $priorityOrder[1] $priorityOrder[2];
}

global proc fillPriority()
{
    // IF WE ADD MORE CATEGORIES, WE MUST UPDATE THIS FUNCTION!!!
    global string $scrollPriority;
    global int $priorityOrder[];
    for ($i = 0; $i < 3; $i++) {
        switch($priorityOrder[$i]) {
            case 0:
                textScrollList -e -a "ROCK" $scrollPriority;
                break;
            case 1:
                textScrollList -e -a "TREE" $scrollPriority;
                break;
            case 2:
                textScrollList -e -a "HOUSE" $scrollPriority;
                break;
        }
    }
}

global proc deleteCurrentSelectRegion()
{
    global int $selectionType;
    global string $selectionRegion[];
    // Delete current selection region (if there is one)
    if ($selectionType) {
        select -r $selectionRegion[0];
        delete;
        $selectionType = 0;
    }
}

global proc makePlanarSelectRegion()
{
    global string $selectionMat;
    global string $selectionRegion[];
    global int $selectionType;
    global string $selectionLayer;
    if ($selectionType != 1) {
        // Create a 2-D selection bound from a plane
        $selectionRegion = `polyPlane -name "selectionRegion"`;
        scale -r 2 2 2;
        // Assign selection material to plane
        hyperShade -assign $selectionMat;
        $selectionType = 1;
        // Add the plane to selectionLayer
        layerEditorAddObjects $selectionLayer;
        select -cl  ; // deselect
    }
}

global proc makeRadialSelectRegion()
{
    global string $selectionMat;
    global string $selectionRegion[];
    global int $selectionType;
    global string $selectionLayer;
    if ($selectionType != 2) {
        // Create a 2-D selection bound from a disc
        $selectionRegion = `polyCylinder -name "selectionRegion" -height 0.010`;
        // Assign selection material to disc
        hyperShade -assign $selectionMat;
        $selectionType = 2;
        // Add the disc to selectionLayer
        layerEditorAddObjects $selectionLayer;
        select -cl  ; // deselect
    }
}

global proc focusOnCurrentSelection()
{
    global string $selectionRegion[];
    global int $selectionType;
    if ($selectionType) {
        select -r $selectionRegion[0];
        viewFit -f 0.;
        select -cl  ; // deselect
    }
}

global proc moveAlongAxis(float $val, int $axis)
{
    global string $selectionRegion[];
    global int $selectionType;
    if ($selectionType) {
        select -r $selectionRegion[0];
        if ($axis == 0) {
            // Add onto current X position
            move -x ($val + (getAttr ($selectionRegion[0] + ".translateX")));
        } else if ($axis == 1) {
            // Add onto current Z position
            move -z ($val + (getAttr ($selectionRegion[0] + ".translateZ")));
        }
        select -cl  ; // deselect
    }
}

global proc scaleRegion(float $val, int $axis)
{
    global string $selectionRegion[];
    global int $selectionType;
    if ($selectionType == 1) {
        select -r $selectionRegion[0];
        if ($axis == 0) {
            float $width = `polyPlane -q -w $selectionRegion`;
            if ($width + $val > 0) {
                // increase/decrease width
                setAttr ($selectionRegion[1] + ".width") ($width + $val);
            }
        } else if ($axis == 1) {
            float $height = `polyPlane -q -h $selectionRegion`;
            if ($height + $val > 0) {
                // increase/decrease height
                setAttr ($selectionRegion[1] + ".height") ($height + $val);
            }
        }
        select -cl  ; // deselect
    } else if ($selectionType == 2) {
        select -r $selectionRegion[0];
        if ($axis == 0) {
            float $rad = `polyCylinder -q -r $selectionRegion[0]`;
            if ($rad + $val > 0) {
                // increase/decrease radius
                setAttr ($selectionRegion[1] + ".radius") ($rad + $val);
            }
        }
        select -cl  ; // deselect
    }
}

global proc saveSelection()
{
    global string $selectionRegion[];
    global int $selectionType;
    if ($selectionType) {
        float $width = 0;
        float $height = 0;
        float $boundBox[];
        float $worldPos[];
        if ($selectionType == 1) {
            // PLANAR
            $width = `polyPlane -q -w $selectionRegion`;
            $height = `polyPlane -q -h $selectionRegion`;
            $boundBox = `exactWorldBoundingBox $selectionRegion`;
            $worldPos = `xform -q -ws -t $selectionRegion`;
            WorldPalette -st 1 -w $width -h $height -wp $worldPos[0] $worldPos[1] $worldPos[2] -mib $boundBox[0] $boundBox[1] $boundBox[2] -mab $boundBox[3] $boundBox[4] $boundBox[5];
        } else if ($selectionType == 2) {
            // RADIAL
            $width = `polyCylinder -q -r $selectionRegion[0]`;
            $boundBox = `exactWorldBoundingBox selectionRegion`;
            $worldPos = `xform -q -ws -t $selectionRegion`;
            WorldPalette -st 2 -w $width -wp $worldPos[0] $worldPos[1] $worldPos[2] -mib $boundBox[0] $boundBox[1] $boundBox[2] -mab $boundBox[3] $boundBox[4] $boundBox[5];
        }
    }
}

global proc ShowGUI()
{
    // Get the necessary global variables
    // Selection
    global string $noSelect;
    global string $planarSelect;
    global string $radialSelect;
    global int $selectionType;
    // Priority Order
    global string $scrollPriority;
    // Create the GUI window
    string $window = `window -title "WorldPalette GUI" -s 0`;
        columnLayout -adjustableColumn true;
            frameLayout -label "Selection" -collapsable true;
                frameLayout -label "Selection Mode";
                    rowColumnLayout -numberOfColumns 3 -columnWidth 1 100 -columnWidth 2 100 -columnWidth 3 100 -cs 2 5 -cs 3 5;
                        string $modeCollection = `radioCollection`;
                        $noSelect = `radioButton -l "No Selection" -onc deleteCurrentSelectRegion`;
                        $planarSelect = `radioButton -l "Planar Selection" -onc makePlanarSelectRegion -ofc deleteCurrentSelectRegion`;
                        $radialSelect = `radioButton -l "Radial Selection" -onc makeRadialSelectRegion -ofc deleteCurrentSelectRegion`;
                        setParent ..;
                    setParent ..;
                frameLayout -label "Move Selection";
                    rowColumnLayout -numberOfColumns 2 -columnWidth 1 145 -columnWidth 2 145 -rs 1 5 -cs 1 5 -cs 2 5;
                        button -l "Move +X" -c "moveAlongAxis(1.0, 0)"; button -l "Move -X" -c "moveAlongAxis(-1.0, 0)";
                        button -l "Move +Z" -c "moveAlongAxis(1.0, 1)"; button -l "Move -Z" -c "moveAlongAxis(-1.0, 1)";
                        setParent ..;
                    setParent ..;
                frameLayout -label "Resize Selection";
                    rowColumnLayout -numberOfColumns 2 -columnWidth 1 145 -columnWidth 2 145 -rs 1 5 -cs 1 5 -cs 2 5;
                        button -l "Increase Width" -c "scaleRegion(0.5, 0)"; button -l "Decrease Width" -c "scaleRegion(-0.5, 0)";
                        button -l "Increase Height" -c "scaleRegion(0.5, 1)"; button -l "Decrease Height" -c "scaleRegion(-0.5, 1)";
                        setParent ..;
                    setParent ..;
                frameLayout -label "Other Options";
                    rowColumnLayout -numberOfColumns 2 -columnWidth 1 145 -columnWidth 2 145 -rs 1 5 -cs 1 5 -cs 2 5;
                        button -l "Focus On Selection Region" -c focusOnCurrentSelection;
                        button -l "Save Selection to Palette" -c saveSelection;
                        setParent ..;
                    setParent ..;
            frameLayout -label "Distribution" -collapsable true;
                frameLayout -label "Priority Order";
                    columnLayout -columnAttach "both" 5 -rowSpacing 10;
                        $scrollPriority = `textScrollList -numberOfRows 3 -dcc reorderPriority`;
                        button -l "Update Priority" -c updatePriority;
                    setParent ..;
                frameLayout -label "Palette";
                //setParent ..;
          
    // Find which radio button must be set active
    if ($selectionType) {
        if ($selectionType == 1) {
            radioCollection -edit -select $planarSelect $modeCollection; 
        } else if ($selectionType == 2) {
            radioCollection -edit -select $radialSelect $modeCollection; 
        }
    } else {
        radioCollection -edit -select $noSelect $modeCollection; 
    }
    // Append the items to priority order scroll in correct order
    fillPriority;
    showWindow;    
}

global string $gMainWindow;
setParent $gMainWindow;

// Set Y as up axis
setUpAxis "y";

// GUI Items
global string $noSelect;
global string $planarSelect;
global string $radialSelect;
global string $scrollPriority;

// Priority Order
global int $priorityOrder[] = { 0, 1, 2 }; // 0 = ROCK; 1 = TREE; 2 = HOUSE (UPDATE THIS IF MORE CATEGORIES ARE ADDED!)

// Selection Shader
global string $selectionMat;

// Selection Region
global int $selectionExists = false;
global string $selectionRegion[];
global int $selectionType = 0;

// Create the selection display layer
global string $selectionLayer;
$selectionLayer = `createDisplayLayer -e -name "SelectionLayer"`;
setAttr ($selectionLayer + ".displayType") 2; // We don't want the user to manipulate it

// adds a new drop down menu
menu -l "World Palette"
-p MayaWindow
-to 1
-aob true
NewDropDownMenu;

// add an item to the drop down menu
menuItem -l "Show GUI"
-echoCommand true
-c ShowGUI
NewDropDownMenuItem1;

// Create selection shader
$selectionMat = `shadingNode -name "selection" -asShader lambert`;
setAttr "selection.color" -type double3 0.2 0.8 0.8;
setAttr "selection.transparency" -type double3 0.85 0.85 0.85;
select -cl  ;
